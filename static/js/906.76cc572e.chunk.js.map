{"version":3,"file":"static/js/906.76cc572e.chunk.js","mappings":"gNAKaA,EAA2CC,EAAAA,MAAW,YAAgB,IAAD,EAAbC,EAAa,EAAbA,QAEjE,OAAO,iCACH,SAAC,KAAD,CAASC,GAAE,mBAAcD,EAAQE,QAAjC,UACI,gBAAKC,IAAI,SAASC,IAAG,UAAEJ,EAAQK,aAAV,QAAmBC,EAAeC,MAAO,CAACC,MAAO,GAAIC,aAAc,SAE5F,uBAAIT,EAAQU,YACZ,yBAAMV,EAAQA,YAErB,I,UCZYW,EAAiB,SAACC,GAAD,OAAsBA,EAAMC,cAAcC,QAA1C,ECGjBC,EAAe,WACxB,IAAMD,GAAWE,EAAAA,EAAAA,GAAeL,GAC1BM,GAASC,EAAAA,EAAAA,QAAuB,MACtC,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAWA,OAJAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRF,IAAY,UAAAH,EAAOM,eAAP,SAAgBC,eAAe,CAACC,SAAU,WAC7D,GAAE,CAACX,KAEG,+BACH,iBAAKP,MAAO,CAACmB,OAAQ,IAAKC,UAAW,QAASC,SAX5B,SAACC,GACnB,IAAMC,EAAKD,EAAEE,cACTC,KAAKC,IAAKH,EAAGI,aAAeJ,EAAGK,UAAaL,EAAGM,cAAgB,GAAIf,GAAc,GAChFA,GAAc,EACtB,EAOG,UACKP,EAASuB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACzC,EAAD,CAAqBE,QAASsC,GAAhBC,EAA5B,KACd,gBAAKC,IAAKvB,QAGrB,E,UCrBYwB,EAAkB,WAC3B,OAA8BtB,EAAAA,EAAAA,UAAS,IAAvC,eAAOnB,EAAP,KAAgB0C,EAAhB,KACA,GAA4BvB,EAAAA,EAAAA,UAA8B,WAA1D,eAAOwB,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,KAWjB,OALAxB,EAAAA,EAAAA,YAAU,WAEN,OADAsB,EAAU,SACH,kBAAMA,EAAU,UAAhB,CACV,GAAE,CAACD,KAEG,iCACH,0BACI,qBAAUI,SAAU,SAAClB,GAAD,OAAOa,EAAWb,EAAEE,cAAciB,MAAlC,EAA0CA,MAAOhD,OAEzE,0BACI,mBAAQiD,SAAqB,YAAXN,EAAsBO,QAfrB,WAClBlD,IACL6C,GAASM,EAAAA,EAAAA,IAAYnD,IACrB0C,EAAW,IACd,EAWO,sBAGX,ECFD,GAD8BU,EAAAA,EAAAA,IAhBR,WAClB,IAAMP,GAAWC,EAAAA,EAAAA,KAOjB,OALAxB,EAAAA,EAAAA,YAAU,WAEN,OADAuB,GAASQ,EAAAA,EAAAA,OACF,kBAAMR,GAASS,EAAAA,EAAAA,MAAf,CACV,GAAE,KAGC,4BACI,SAACvC,EAAD,KACA,SAAC0B,EAAD,MAGX,G","sources":["components/Messenger/Messages/Message/Message.tsx","redux/selectors/messengerSelectors.ts","components/Messenger/Messages/Messages.tsx","components/Messenger/MessageForm/MessageForm.tsx","components/Messenger/Messenger.tsx"],"sourcesContent":["import React, {FC} from 'react'\r\nimport {WSMessagesType} from '../../../../types/types'\r\nimport initialAvatar from '../../../../assets/images/avatar.png'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Message: FC<{ message: WSMessagesType }> = React.memo(({message}) => {\r\n\r\n    return <>\r\n        <NavLink to={`/profile/${message.userId}`}>\r\n            <img alt=\"avatar\" src={message.photo ?? initialAvatar} style={{width: 60, borderRadius: 15}}/>\r\n        </NavLink>\r\n        <b>{message.userName}</b>\r\n        <div>{message.message}</div>\r\n    </>\r\n})","import {RootState} from '../store'\r\n\r\nexport const selectMessages = (state: RootState) => state.messengerPage.messages","import React, {FC, useEffect, useRef, useState} from 'react'\r\nimport {Message} from './Message/Message'\r\nimport {useAppSelector} from '../../../hooks/hooks'\r\nimport {selectMessages} from '../../../redux/selectors/messengerSelectors'\r\n\r\nexport const Messages: FC = () => {\r\n    const messages = useAppSelector(selectMessages)\r\n    const anchor = useRef<HTMLDivElement>(null)\r\n    const [autoscroll, setAutoscroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const el = e.currentTarget\r\n        if (Math.abs((el.scrollHeight - el.scrollTop) - el.clientHeight) < 50) setAutoscroll(true)\r\n        else setAutoscroll(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (autoscroll) anchor.current?.scrollIntoView({behavior: 'smooth'})\r\n    }, [messages])\r\n\r\n    return <>\r\n        <div style={{height: 400, overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n            <div ref={anchor}></div>\r\n        </div>\r\n    </>\r\n}","import React, {FC, useEffect, useState} from 'react'\r\nimport {useAppDispatch} from '../../../hooks/hooks'\r\nimport {sendMessage} from '../../../redux/messengerReducer'\r\n\r\nexport const MessageForm: FC = () => {\r\n    const [message, setMessage] = useState('')\r\n    const [status, setStatus] = useState<'pending' | 'ready'>('pending')\r\n    const dispatch = useAppDispatch()\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    useEffect(() => {\r\n        setStatus('ready')\r\n        return () => setStatus('pending')\r\n    }, [status])\r\n\r\n    return <>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\r\n        </div>\r\n        <div>\r\n            <button disabled={status === 'pending'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </>\r\n}","import {FC, useEffect} from 'react'\r\nimport withRedirect from '../../hoc/withRedirect'\r\nimport {Messages} from './Messages/Messages'\r\nimport {MessageForm} from './MessageForm/MessageForm'\r\nimport {useAppDispatch} from '../../hooks/hooks'\r\nimport {startMessagesListening, stopMessagesListening} from '../../redux/messengerReducer'\r\n\r\nconst Messenger: FC = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => dispatch(stopMessagesListening())\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Messages/>\r\n            <MessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MessengerWithRedirect = withRedirect(Messenger)\r\nexport default MessengerWithRedirect"],"names":["Message","React","message","to","userId","alt","src","photo","initialAvatar","style","width","borderRadius","userName","selectMessages","state","messengerPage","messages","Messages","useAppSelector","anchor","useRef","useState","autoscroll","setAutoscroll","useEffect","current","scrollIntoView","behavior","height","overflowY","onScroll","e","el","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","ref","MessageForm","setMessage","status","setStatus","dispatch","useAppDispatch","onChange","value","disabled","onClick","sendMessage","withRedirect","startMessagesListening","stopMessagesListening"],"sourceRoot":""}