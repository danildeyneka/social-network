{"version":3,"file":"static/js/622.51b29e42.chunk.js","mappings":"6LACA,GAAgB,aAAe,6B,6BC0C/B,EApCoB,WAChB,IAAMA,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,aAC/BG,GAAWC,EAAAA,EAAAA,MAEjB,OACI,gBAAKC,UAAWC,EAAAA,KAAhB,SACKN,EAAUO,UAAUC,KAAI,SAAAC,GAAC,OAAI,4BAC1B,SAAC,KAAD,CAASC,GAAE,mBAAcD,EAAEE,IAA3B,UACI,gBAAKN,UAAWC,EAAAA,aACXM,IAAwB,OAAnBH,EAAEI,OAAOC,MAAiBL,EAAEI,OAAOC,MAAQC,EAChDC,IAAI,WAEb,yBACKP,EAAEQ,UACG,mBAAQC,SAAUlB,EAAUmB,sBAAsBC,SAASX,EAAEE,IACrDU,QAAS,WACLlB,GAASmB,EAAAA,EAAAA,IAASb,EAAEE,MAFhC,uBAIA,mBAAQO,SAAUlB,EAAUmB,sBAAsBC,SAASX,EAAEE,IACrDU,QAAS,WACLlB,GAASoB,EAAAA,EAAAA,IAAOd,EAAEE,MAF9B,uBAKV,iBAAKN,UAAWC,EAAAA,WAAhB,WACI,gBAAKD,UAAWC,EAAAA,WAAhB,SAA+BG,EAAEe,QACjC,gBAAKnB,UAAWC,EAAAA,aAAhB,SAAiCG,EAAEgB,UACnC,iBAAKpB,UAAWC,EAAAA,eAAhB,WACI,cAAGD,UAAWC,EAAAA,cAAd,SAAgC,wBAChC,cAAGD,UAAWC,EAAAA,WAAd,SAA6B,4BAtBDG,EAAEE,UCZtD,EAAwB,0BAAxB,EAA6D,6BC0B7D,EAvBmB,WAQf,IAPA,IAAMR,GAAWC,EAAAA,EAAAA,MACXsB,GAAWzB,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAU0B,YACxCC,GAAc1B,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAU2B,eAC3CC,GAAkB3B,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAU4B,mBAC/CC,EAAaC,KAAKC,KAAKH,EAAkBF,GAE3CM,EAAQ,GACHC,EAAI,EAAGA,GAAKJ,EAAYI,IAC7BD,EAAME,KAAKD,GAEf,IAAIE,EAAaR,EAAc,EAAK,EAAK,EAAIA,EAAc,EACvDS,EAAWT,EAAc,EACzBU,EAAcL,EAAMM,MAAMH,EAAUC,GAExC,OACI,gBAAK/B,UAAWC,EAAhB,SACK+B,EAAY7B,KAAI,SAAA+B,GAAC,OAAI,iBAAclC,UAAWsB,IAAgBY,EAAIjC,EAAa,GACpDe,QAAS,kBAAMlB,GAASqC,EAAAA,EAAAA,IAAcD,EAAGb,KAD/C,mBAC+Da,EAD/D,MAAWA,SCM7C,EAnBc,WACV,IAAMpC,GAAWC,EAAAA,EAAAA,MACXqC,GAAaxC,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAUyC,cAC1Cf,GAAWzB,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAU0B,YACxCC,GAAc1B,EAAAA,EAAAA,KAAY,SAAAC,GAAC,OAAIA,EAAEF,UAAU2B,eAMjD,OAJAe,EAAAA,EAAAA,YAAU,WACNvC,GAASwC,EAAAA,EAAAA,IAAShB,EAAaD,MAChC,CAACA,KAEI,gCACHe,GACK,SAACG,EAAA,EAAD,KACA,4BACE,SAAC,EAAD,KACA,SAAC,EAAD,OALJ","sources":["webpack://my-app/./src/components/Users/Users.module.scss?b204","components/Users/UserProfile/UserProfile.jsx","webpack://my-app/./src/components/common/Pagination/Pagination.module.scss?9a07","components/common/Pagination/Pagination.jsx","components/Users/Users.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"user__avatar\":\"Users_user__avatar__qVseq\"};","import c from \"../Users.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport initialPhoto from \"../../../assets/images/avatar.png\";\r\nimport {follow, unfollow} from \"../../../redux/usersReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React from \"react\";\r\n\r\nconst UserProfile = () => {\r\n    const usersPage = useSelector(s => s.usersPage)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={c.user}>\r\n            {usersPage.usersData.map(u => <div key={u.id}>\r\n                <NavLink to={`/profile/${u.id}`}>\r\n                    <img className={c.user__avatar}\r\n                         src={u.photos.small !== null ? u.photos.small : initialPhoto}\r\n                         alt='img'/>\r\n                </NavLink>\r\n                <div>\r\n                    {u.followed\r\n                        ? <button disabled={usersPage.isFollowingInProgress.includes(u.id)}\r\n                                  onClick={() => {\r\n                                      dispatch(unfollow(u.id))\r\n                                  }}>Unfollow</button>\r\n                        : <button disabled={usersPage.isFollowingInProgress.includes(u.id)}\r\n                                  onClick={() => {\r\n                                      dispatch(follow(u.id))\r\n                                  }}>Follow</button>}\r\n                </div>\r\n                <div className={c.user__info}>\r\n                    <div className={c.user__name}>{u.name}</div>\r\n                    <div className={c.user__status}>{u.status}</div>\r\n                    <div className={c.user__location}>\r\n                        <p className={c.user__country}>{'u.location.country'}</p>\r\n                        <p className={c.user__city}>{'u.location.city'}</p>\r\n                    </div>\r\n                </div>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserProfile","// extracted by mini-css-extract-plugin\nexport default {\"pages\":\"Pagination_pages__ZVQ24\",\"selected\":\"Pagination_selected__DtVmt\"};","import c from \"./Pagination.module.scss\";\r\nimport {onPageChanged} from \"../../../redux/usersReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst Pagination = () => {\r\n    const dispatch = useDispatch()\r\n    const pageSize = useSelector(s => s.usersPage.pageSize)\r\n    const currentPage = useSelector(s => s.usersPage.currentPage)\r\n    const totalUsersCount = useSelector(s => s.usersPage.totalUsersCount)\r\n    const pagesCount = Math.ceil(totalUsersCount / pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let prevPage = ((currentPage - 5) < 0) ? 0 : currentPage - 5\r\n    let nextPage = currentPage + 5\r\n    let slicedPages = pages.slice(prevPage, nextPage)\r\n\r\n    return (\r\n        <div className={c.pages}>\r\n            {slicedPages.map(p => <span key={p} className={currentPage === p ? c.selected : ''}\r\n                                        onClick={() => dispatch(onPageChanged(p, pageSize))}>{`${p} `}</span>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUsers} from \"../../redux/usersReducer\";\r\nimport {useEffect} from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport UserProfile from \"./UserProfile/UserProfile\";\r\nimport Pagination from \"../common/Pagination/Pagination\";\r\nimport React from \"react\";\r\n\r\nconst Users = () => {\r\n    const dispatch = useDispatch()\r\n    const isFetching = useSelector(s => s.usersPage.isFetching)\r\n    const pageSize = useSelector(s => s.usersPage.pageSize)\r\n    const currentPage = useSelector(s => s.usersPage.currentPage)\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers(currentPage, pageSize))\r\n    }, [pageSize])\r\n\r\n    return (<>\r\n        {isFetching\r\n            ? <Preloader/>\r\n            : <div>\r\n                <Pagination/>\r\n                <UserProfile/>\r\n            </div>} {/*конец лоадера*/}\r\n    </>)\r\n}\r\nexport default Users\r\n\r\n\r\n// ================== легаси классовый компонент - без хуков и в обертке контейнерного компонента\r\n\r\n// ========== UsersContainer.jsx ===============\r\n\r\n// let mapStateToProps = (state) => { // state приходит через пропсы с самого начала либо вызывается напрямую\r\n//     return {\r\n//         usersData: state.usersPage.usersData,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage\r\n//     }\r\n// }\r\n//\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         setUsers: (users) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         toggleFollow: (userId) => {\r\n//             dispatch(toggleFollowAC(userId))\r\n//         },\r\n//         setCurrentPage: (pageNumber) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount: (totalUsersCount) => {\r\n//             dispatch(setTotalUsersCountAC(totalUsersCount))\r\n//         }\r\n//     }\r\n// }\r\n\r\n//\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Users)\r\n//     коннект соединяет стейт и диспатч и закрепляет их за переданным компонентом в конце в виде его пропсов\r\n\r\n\r\n//=========== еще большее сокращение кода=========\r\n// mapDispatchToProps превращается в объект, передаваемый вторым параметром в connect, а в action creator удаляем -AC:\r\n// connect(mapStateToProps, {setUsers, toggleFollow ...})(Users)\r\n\r\n\r\n// ============ Users.jsx ======================\r\n\r\n\r\n// class User extends React.Component {\r\n//     componentDidMount() {\r\n//         axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${usersPage.currentPage}&count=${usersPage.pageSize}`)\r\n//             .then((response) => {\r\n//                 setUsers(response.data.items)\r\n//                 setTotalUsersCount(response.data.totalCount)\r\n//             })\r\n//     }\r\n//\r\n//     onPageChanged = (pageNumber) => {\r\n//         setCurrentPage(pageNumber)\r\n//         axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${usersPage.pageSize}`)\r\n//             .then((response) => {\r\n//                 setUsers(response.data.items)\r\n//             })\r\n//     }\r\n//\r\n//     render() {\r\n//         html остальной. данные стейта идут через пропсы и this\r\n//     }\r\n// }"],"names":["usersPage","useSelector","s","dispatch","useDispatch","className","c","usersData","map","u","to","id","src","photos","small","initialPhoto","alt","followed","disabled","isFollowingInProgress","includes","onClick","unfollow","follow","name","status","pageSize","currentPage","totalUsersCount","pagesCount","Math","ceil","pages","i","push","prevPage","nextPage","slicedPages","slice","p","onPageChanged","isFetching","useEffect","getUsers","Preloader"],"sourceRoot":""}